{"version":3,"sources":["KakeiboItem.js","KakeiboSheet.js","data/store.js","PaymentForm.js","AccountContext.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["KakeiboItem","props","react_default","a","createElement","className","product","price","KakeiboSheet","payments","map","item","Object","assign","key","id","dispatcher","Dispatcher","ReduceStore","_default","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","password","e","onPaymentSubmit","_this2","type","placeholder","value","onChange","setState","target","onClick","handleSubmit","Component","React","createContext","isLogin","onSubmit","preventDefault","console","log","url","App","account","loaded","fetch","method","mode","then","res","json","err","init","params","_this3","headers","Content-Type","body","URLSearchParams","objectSpread","action","ok","_this4","_this$state","AccountContext","Provider","PaymentForm_default","addPayment","LoginForm_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3809c12c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default props => {\n  return (\n    <div className=\"kakeibo-payment-item\">\n      { props.product }\n      <strong>\n        { props.price }\n      </strong>\n      ÂÜÜ\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport KakeiboItem from './KakeiboItem';\n\nexport default props => {\n  return (\n    <div className=\"kakeibo-sheet\">\n      {\n        props.payments.map(item => (\n          <KakeiboItem key={ item.id } { ...item } />\n        ))\n      }\n    </div>\n  );\n}\n","import {Dispatcher} from 'flux';\nimport {ReduceStore} from 'flux/utils';\n// import Immutable from 'immutable';\n\nconst dispatcher = new Dispatcher();\n\nclass KakeiboStore extends ReduceStore {\n  constructor() {\n    super(dispatcher);\n  }\n\n  getInitialState() {\n    return [];\n  }\n\n  reduce(state, action) {\n    switch (action.type) {\n      case 'addPayment':\n        state.push({\n          product: action.props.product,\n          price: action.props.price\n        });\n        return state;\n\n      default:\n        return state;\n    }\n  }\n}\n\nconst actions = {\n  addPayment(props) {\n    dispatcher.dispatch({\n      type: 'addPayment',\n      props\n    });\n  }\n}\n\nexport { actions };\n","import React, { Component } from 'react';\nimport { actions } from './data/store.js';\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: '',\n\n      product: '',\n      price: ''\n    }\n  }\n\n  handleSubmit(e) {\n    this.props.onPaymentSubmit({\n      password: this.state.password,\n\n      product: this.state.product,\n      price: this.state.price\n    });\n    /* *flux*\n    actions.addPayment({\n      product: this.state.product,\n      price: this.state.price\n    })\n    */\n  }\n\n  render() {\n    return (\n      <div className=\"payment-form\">\n        <div>\n          <input type=\"text\" placeholder=\"„Éë„Çπ„ÉØ„Éº„Éâ(‰ªÆ)\"\n           value={ this.state.password }\n           onChange={ e => this.setState({ password: e.target.value }) }\n          />\n        </div>\n\n        <div>\n          üçî\n          <input type=\"text\" placeholder=\"„Å™„Å´„Å´\"\n           value={ this.state.product }\n           onChange={ e => this.setState({ product: e.target.value }) }\n          />\n        </div>\n        <div>\n          üí∞\n          <input type=\"text\" placeholder=\"„ÅÑ„Åè„Çâ\"\n           value={ this.state.price }\n           onChange={ e => this.setState({ price: e.target.value }) }\n          />\n        </div>\n        <div>\n          <button onClick={ e => this.handleSubmit(e) }>\n            üí∏ „Å§„Åã„Å£„ÅüÔºÅ\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default React.createContext({\n  isLogin: false\n});\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n  render() {\n    return (\n      <form onSubmit={ e => {\n          e.preventDefault();\n          console.log(e);\n        }\n      }>\n        <button>\n          Sign in\n        </button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport KakeiboSheet from './KakeiboSheet.js';\nimport PaymentForm from './PaymentForm.js';\nimport AccountContext from './AccountContext.js';\nimport LoginForm from './LoginForm.js';\n\nconst url = 'https://script.google.com/macros/s/AKfycbxhKsDyuxQkE6ihqU-2QJAeyo1Zt0AU1dSHl8qfg4o8-2yFQVzn/exec'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: {\n        isLogin: true,\n        id: 'dummy_account'\n      },\n      loaded: false,\n      payments: [],\n    }\n  }\n\n  init() {\n    fetch(url + '?action=get-payments', {\n      method: 'GET',\n      mode: 'cors'\n    })\n    .then(res => res.json())\n    .then(res => {\n      console.log(res);\n      this.setState({\n        loaded: true,\n        payments: res.payments\n      });\n    },\n    err => {\n      this.setState({\n        loaded: true,\n        payments: []\n      })\n    });\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  addPayment(params) {\n    fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        action: 'add-payment',\n        ...params,\n      })\n    })\n    .then(res => res.json())\n    .then(res => {\n      if (res.ok) {\n        this.init();\n      }\n    });\n  }\n\n  render() {\n    const { loaded, payments } = this.state;\n    return (\n      <AccountContext.Provider value={ this.state.account }> {/* unused */}\n      {\n        this.state.account.isLogin ? (  // <- Todo: Router tsukaouze\n          loaded ? (\n              <div className=\"App\">\n                  <PaymentForm onPaymentSubmit={ e => this.addPayment(e) } />\n                  <KakeiboSheet payments={ payments } />\n              </div>\n            ) : (\n              <div>Loading...</div>\n            )\n          ) : (\n            <LoginForm />\n          )\n      }\n      </AccountContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}